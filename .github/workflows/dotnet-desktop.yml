name: .NET Framework Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore Dependencies for LibReFrontier
      run: nuget restore ./LibReFrontier/LibReFrontier.csproj -SolutionDirectory .

    - name: Build LibReFrontier Project
      run: msbuild ./LibReFrontier/LibReFrontier.csproj /p:Configuration=Release

    - name: Restore Dependencies for ReFrontier
      run: nuget restore ./Refrontier/ReFrontier.csproj -SolutionDirectory .
    - name: Publish ReFrontier Project
      run: msbuild ./Refrontier/ReFrontier.csproj /t:Publish /p:Configuration=Release /p:Platform="AnyCPU" /p:OutputPath=output

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: D:\a\ReFrontier-ReLeased\ReFrontier-ReLeased\Refrontier\outputapp.publish\Application Files\

  create-release:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download Artifacts
      uses: actions/download-artifact@v4
      with: 
        path: output/

    - name: Setup Git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get latest tag
      id: get_latest_tag
      run: |
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v0.0.0")
        echo "Latest tag: $latest_tag"
        echo "::set-output name=latest_tag::$latest_tag"


    - name: Bump version (example to increment patch version)
      id: bump_version
      run: |
        latest_tag=${{ steps.get_latest_tag.outputs.latest_tag }}
        IFS='.' read -r -a version_parts <<< "${latest_tag//v/}"
        major=${version_parts[0]}
        minor=${version_parts[1]}
        patch=$((version_parts[2] + 1))
        new_tag="v${major}.${minor}.${patch}"
        echo "New tag: $new_tag"
        echo "::set-output name=new_tag::$new_tag"

    - name: Create and push new tag
      run: |
        new_tag=${{ steps.bump_version.outputs.new_tag }}
        git tag $new_tag
        git push origin $new_tag

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.bump_version.outputs.new_tag }}
        release_name: ${{ steps.bump_version.outputs.new_tag }}
        draft: false
        prerelease: false

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: output/ReFrontier_1_0_0_0
        asset_name: build-artifacts
        asset_content_type: application/zip




 
    