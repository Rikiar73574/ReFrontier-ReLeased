name: .NET Framework Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1

    - name: Restore Dependencies for LibReFrontier
      run: nuget restore ./LibReFrontier/LibReFrontier.csproj -SolutionDirectory .

    - name: Build LibReFrontier Project
      run: msbuild ./LibReFrontier/LibReFrontier.csproj /p:Configuration=Release

    - name: Restore Dependencies for ReFrontier
      run: nuget restore ./Refrontier/ReFrontier.csproj -SolutionDirectory .
    - name: Publish ReFrontier Project
      run: msbuild ./Refrontier/ReFrontier.csproj /t:Publish /p:Configuration=Release /p:Platform="AnyCPU" /p:OutputPath=output

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: D:\a\ReFrontier-ReLeased\ReFrontier-ReLeased\Refrontier\outputapp.publish\Application Files\

  release-assets:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: ./output

    - name: Install hub
      run: |
        sudo apt-get update
        sudo apt-get install hub

    - name: Update GitHub Release
      id: create_release
      run: |
        TAG_NAME="v2.0.0"
        RELEASE_NAME="Release v2.0.0"
        if gh release view "$TAG_NAME";
          then
            echo "Release $TAG_NAME already exists. Updating it."
            gh release edit "$TAG_NAME" --title "$RELEASE_NAME" --notes "Updated release."
        else
          echo "Creating new release $TAG_NAME."
          gh release create "$TAG_NAME" --title "$RELEASE_NAME" --notes "New release."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Release Assets
      run: |
        cd output/ReFrontier_1_0_0_0/
        for file in *; do
          echo "Uploading $file..."
          gh release upload "$TAG_NAME" "$file"
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      needs: create_release



 
    